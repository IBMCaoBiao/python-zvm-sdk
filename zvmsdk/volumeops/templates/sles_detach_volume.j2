#!/bin/bash
# Generated by jinja2 template

fcp_list="{{ fcp_list }}"
input_wwpns="{{ wwpns }}"
lun="{{ lun }}"
target_filename="{{ target_filename }}"
is_last_volume="{{ is_last_volume }}"

echo "Enter SLES detach script with parameters: FCP list:${fcp_list[@]}, INPUT WWPNS:${input_wwpns[@]}, LUN:$lun, target_filename:$target_filename, is_last_volume: $is_last_volume."

# we need to get the intersection between input wwpns and lszfcp output
# because lszfcp -P sometimes can not output all the wwpns
# so if zfcp.conf exists, we change to use WWPNs from zfcp.conf directly
# if not exist, use lszfcp -P to query wwpns info
if [ -e /etc/zfcp_ports.info ]; then
    zfcp_ports_info=`cat /etc/zfcp_ports.info | awk '{print $1,$2}'`
    echo "port info in zfcp_ports.info: $zfcp_ports_info"
else
    zfcp_ports_info=`lszfcp -P | awk '{print $1}' | awk -F'/' '{print $1,$2}'`
    echo "port info in lszfcp output: $zfcp_ports_info"
fi

declare -A valid_dict
for fcp in ${fcp_list[@]}
do
    for wwpn in ${input_wwpns[@]}
    do
        fcp_wwpn_str="0.0.${fcp} ${wwpn}"
        if [[ $zfcp_ports_info =~ $fcp_wwpn_str ]]; then
            echo "$fcp_wwpn_str matched with content of local ports info."
            # add this combination into valid_dict
            if [[ -z ${valid_dict[$fcp]} ]]; then
                valid_dict+=([$fcp]="$wwpn")
            else
                old_value=${valid_dict[$fcp]}
                new_value=${old_value}" "$wwpn
                valid_dict[$fcp]=$new_value
            fi
        fi
    done
done
echo "Got valid wwpns, list of key is: ${!valid_dict[@]}, list of value is: ${valid_dict[@]} ."
# check the content of valid_dict, if no content, return error and exit code 3
valid_fcp_count=0
for fcp in ${!valid_dict[@]}
do
    valid_fcp_count=$((valid_fcp_count+=1))
done
if [[ $valid_fcp_count -eq 0 ]]; then
    echo "can not found intersection between input wwpns: ${input_wwpns[@]} and port info in system: $zfcp_ports_info"
    exit 3
fi

# flag which indicate whether we found a valid and accessable path for the volume
FoundDiskPath=0
# wait for the device ready
for fcp in ${!valid_dict[@]}
do
    ActiveWWPNs=(${valid_dict[$fcp]})
    echo "To find active disk path of LUN $lun, got WWPNs: ${ActiveWWPNs[@]} belonging to FCP device: $fcp."

    # loop all the WWPNs to found the alive device
    for j in ${ActiveWWPNs[@]}
    do
        x="/dev/disk/by-path/ccw-0.0.$fcp-zfcp-$j:$lun"
        # the x would be like:
        # ccw-0.0.1d13-zfcp-0x5005076306035388:0x4014400400000000
        echo "try disk path:$x"
        if [ -e $x ]; then
            diskPath=$x
            FoundDiskPath=1
            break
        fi
    done

    if [ $FoundDiskPath -eq 1 ]; then
        echo "Found active disk path: $diskPath ."
        break
    fi
done
# if no disk path found, exit with code 4
if [[ -z $diskPath ]]; then
    echo "No valid paths found between FCP devices: ${fcp_list[@]} and WWPNS: ${input_wwpns}"
    exit 4
fi

# get the wwid of device, the WWID are same for same volume
WWID=$(/lib/udev/scsi_id --page 0x83 --whitelisted $diskPath)
echo "scsi_id command get WWID:$WWID for device: $diskPath"
# flush IO for devices
blockdev --flushbufs $diskPath > /dev/null

# exit code default to 0, because WWIDs may be empty
exit_code=0

map_name=$(multipath -l $WWID -v 1)
echo "get map name: $map_name"
output=$(multipath -f $map_name 2>&1)
exit_code=$?
# error output not empty, means error happened
# and the error 'in use' and 'must provode a map name'
# of multipath -f will return same exit code 1
# so diff them, we will ingore the error of 'must provide a map name'
if [ "$output" ]; then
    if [ "$(echo $output | grep -i 'must provide a map name')" ]; then
        echo "ignore error on WWID $WWID and Lun $lun:$output"
        exit_code=0
    elif [ "$(echo $output | grep -i 'in use')" ]; then
        echo "Warning:device $map_name with WWID $WWID and Lun $lun is use, the detachment will continue."
        exit_code=0
    else
        echo "unknown error on device with WWID $WWID and Lun $lun:$output"
        exit_code=2
    fi
fi
echo "exit code for multipath -f: $exit_code"
#if above code didn't succeed, exit now.
if [[ $exit_code != 0 ]]; then
    exit $exit_code
fi

# get the real WWPNs in the file system
for fcp in ${!valid_dict[@]}
do
    ActiveWWPNs=(${valid_dict[$fcp]})
    echo "To remove LUN $lun from file system, got WWPNs: ${ActiveWWPNs[@]} belonging to FCP device $fcp."

    # remove FCP LUNs and their SCSI devices
    for wwpn in ${ActiveWWPNs[@]}
    do
        chzdev -d zfcp-lun 0.0.$fcp:$wwpn:$lun --force
    done

    # remove udev rules
    for wwpn in ${ActiveWWPNs[@]}
    do
        sed -i -e "/ATTR{\[ccw\/0.0.$fcp\]$wwpn\/unit_add}=\"$lun\"/d" /etc/udev/rules.d/51-zfcp-0.0.$fcp.rules
    done

    # if is last volume, then should offline the FCP
    if [ $is_last_volume -eq 1 ]; then
        echo "this is last volume, will offline fcp device $fcp"
        /sbin/chzdev zfcp-host $fcp -d
        echo "delete udev file: /etc/udev/rules.d/51-zfcp-0.0.$fcp.rules"
        rm -f /etc/udev/rules.d/51-zfcp-0.0.$fcp.rules
    fi

    # remove configuration items in zfcp_ports.info
    for WWPN in ${ActiveWWPNs[@]}
    do
        echo "remove WWPN $WWPN for $fcp in zfcp_ports.info"
        sed -i -e "/0.0.$fcp $WWPN $lun/d" /etc/zfcp_ports.info
    done
done


echo "target file name is: $target_filename."
ConfigLib="/lib/udev/rules.d/56-zfcp.rules"
if [ -e "$ConfigLib" ]
then
    ConfigFile="/lib/udev/rules.d/56-zfcp.rules"
else
    ConfigFile="/etc/udev/rules.d/56-zfcp.rules"
fi
sed -i -e /SYMLINK+=\"$target_filename\"/d $ConfigFile

udevadm control --reload
udevadm trigger --sysname-match=dm-*

exit 0

